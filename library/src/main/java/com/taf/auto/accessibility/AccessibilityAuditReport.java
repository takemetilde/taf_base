package com.taf.auto.accessibility;

import cucumber.api.Scenario;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Encapsulates the report generated by the audit.
 *
 */
public final class AccessibilityAuditReport extends ThreadLocal<Map<String, Object>> {
    private static final Logger LOG = LoggerFactory.getLogger(AccessibilityAuditReport.class);

    public interface Keys {
        String ERROR = "error";
        String WARNING = "warning";
        String PLAIN_REPORT = "plain_report";
    }

    private static final ThreadLocalReport report = new ThreadLocalReport();

    public static Map<String, Object> getReport() {
        return report.get();
    }

    public static boolean containsErrors() {
        return containsErrors(getReport());
    }

    public static void writeToScenario(Scenario scenario) {
        Map<String, Object> report = getReport();
        if(!report.isEmpty()) {
            Object plainReport = report.get(Keys.PLAIN_REPORT);
            if(null != plainReport)
                scenario.write(plainReport.toString());
        }
    }

    private static boolean containsErrors(Map<String, Object> report) {
        List possibleErrors = (List) report.get(Keys.ERROR);
        if(null == possibleErrors)
            return false;

        for(Object e : possibleErrors) {
            AccessibilityResult r = (AccessibilityResult) e;
            String rule = r.getRule();
            if(rule.equals("aria-describedby is missing on the following elements")) {
                LOG.warn("Ignoring rule: " + rule);
                continue;
            }
            return true;
        }

        return false;
    }

    private static class ThreadLocalReport extends ThreadLocal<Map<String, Object>> {
        @Override
        protected Map<String, Object> initialValue() {
            return new HashMap<>();
        }
    }
}
